// Generated by CoffeeScript 1.9.3
(function() {
  var allProcs, fs, interpolatePort, killAllProcs, procNotFoundError, registerUncaughtHandler, registered, spawn;

  spawn = require('child_process').spawn;

  fs = require('fs');

  killAllProcs = function(procs) {
    procs.forEach(function(proc) {
      var err;
      try {
        return proc.rawProcess.kill();
      } catch (_error) {
        err = _error;
        return console.error(err.stack);
      }
    });
    return procs = [];
  };

  allProcs = [];

  registered = false;

  registerUncaughtHandler = function(proc) {
    allProcs.push(proc);
    if (!registered) {
      process.on('uncaughtException', function(error) {
        killAllProcs(allProcs);
        throw error;
      });
      process.on('exit', function() {
        return killAllProcs(allProcs);
      });
      return registered = true;
    }
  };

  procNotFoundError = function(error, cmd) {
    error.message = "Unable to find " + cmd;
    return error;
  };

  interpolatePort = function(port) {
    return function(arg) {
      return arg.replace('%port%', port);
    };
  };

  module.exports = function(name, command, commandArgs, port, logPath, logHandle, spawnOpts) {
    var child;
    commandArgs = commandArgs.map(interpolatePort(port));
    child = {
      rawProcess: spawn(command, commandArgs, spawnOpts),
      name: name,
      baseUrl: "http://127.0.0.1:" + port,
      port: port,
      logPath: logPath,
      logHandle: logHandle,
      launchCommand: command,
      launchArguments: commandArgs,
      workingDirectory: spawnOpts.cwd
    };
    registerUncaughtHandler(child);
    child.readLog = function(callback) {
      return fs.readFile(logPath, function(error, data) {
        if (error != null) {
          return callback(error);
        }
        return callback(null, data.toString());
      });
    };
    child.rawProcess.on('error', function(err) {
      if (err.errno === 'ENOENT') {
        child.error = procNotFoundError(err, command).stack;
      }
      return child.rawProcess.kill();
    });
    return child;
  };

}).call(this);
