// Generated by CoffeeScript 1.9.0
(function() {
  var createTailQuote, getLogWithQuote, niceTime, procCrashedError, procTimedoutError, readFileSync;

  readFileSync = require('fs').readFileSync;

  getLogWithQuote = function(proc) {
    var err, logQuote;
    logQuote = (function() {
      try {
        return createTailQuote(readFileSync(proc.logPath, 'utf8'), 20);
      } catch (_error) {
        err = _error;
        return "(failed to load log: " + err.message + ")";
      }
    })();
    return "Log output (last 20 lines):\n\n" + logQuote + "\n\nSee the full log at: " + proc.logPath;
  };

  procCrashedError = function(proc) {
    var message, _ref;
    message = "Process \"" + proc.name + "\" crashed with code " + proc.exitCode + ".\n" + (getLogWithQuote(proc));
    if (((_ref = proc.error) != null ? _ref.length : void 0) > 0) {
      message += "\n" + (proc.error.trim());
    }
    return new Error(message);
  };

  niceTime = function(ms) {
    if (ms > 1000 * 60) {
      return (ms / 1000 / 60) + "min";
    } else if (ms > 1000) {
      return (ms / 1000) + "s";
    } else {
      return ms + "ms";
    }
  };

  createTailQuote = function(str, count) {
    var lines;
    lines = str.split('\n').slice(-count);
    return "> " + (lines.join('\n> '));
  };

  procTimedoutError = function(proc, port, timeout) {
    var formatArguments, message, _ref;
    formatArguments = function(args) {
      if (args == null) {
        args = [];
      }
      if (!args.length) {
        return '(no arguments)';
      }
      return args.join('\n           ');
    };
    message = "Process \"" + proc.name + "\" did not start in time.\n\nDebug info:\n* command: " + proc.launchCommand + "\n           " + (formatArguments(proc.launchArguments)) + "\n* cwd:     " + proc.workingDirectory + "\n* port:    " + port + "\n* timeout: " + (niceTime(timeout)) + "\n```\n\n" + (getLogWithQuote(proc));
    if (((_ref = proc.error) != null ? _ref.length : void 0) > 0) {
      message += "\n" + (proc.error.trim());
    }
    return new Error(message);
  };

  module.exports = function(proc, validate, interval, timeout, port, callback) {
    var check, error, procName, startTime;
    if (proc.rawProcess.exitCode != null) {
      error = procCrashedError(proc);
      return callback(error);
    }
    procName = proc.name;
    startTime = Date.now();
    check = function() {
      return validate(port, function(error, isReady) {
        if (proc.rawProcess.exitCode != null) {
          error = procCrashedError(proc);
          return callback(error);
        }
        if (error != null) {
          return callback(error);
        }
        if (isReady) {
          return callback();
        } else {
          if ((Date.now() - startTime) >= timeout) {
            return callback(procTimedoutError(proc, port, timeout));
          }
          return setTimeout(check, 100);
        }
      });
    };
    return check();
  };


  /*
  Copyright (c) 2015, Groupon, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  
  Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
  
  Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
  
  Neither the name of GROUPON nor the names of its contributors may be
  used to endorse or promote products derived from this software without
  specific prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */

}).call(this);
