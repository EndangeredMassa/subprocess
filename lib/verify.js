// Generated by CoffeeScript 1.9.3
(function() {
  var createTailQuote, getLogWithQuote, niceTime, procCrashedError, procTimedoutError, readFileSync;

  readFileSync = require('fs').readFileSync;

  getLogWithQuote = function(proc) {
    var err, logQuote;
    logQuote = (function() {
      try {
        return createTailQuote(readFileSync(proc.logPath, 'utf8'), 20);
      } catch (_error) {
        err = _error;
        return "(failed to load log: " + err.message + ")";
      }
    })();
    return "Log output (last 20 lines):\n\n" + logQuote + "\n\nSee the full log at: " + proc.logPath;
  };

  procCrashedError = function(proc) {
    var message, ref;
    message = "Process \"" + proc.name + "\" crashed with code " + proc.exitCode + ".\n" + (getLogWithQuote(proc));
    if (((ref = proc.error) != null ? ref.length : void 0) > 0) {
      message += "\n" + (proc.error.trim());
    }
    return new Error(message);
  };

  niceTime = function(ms) {
    if (ms > 1000 * 60) {
      return (ms / 1000 / 60) + "min";
    } else if (ms > 1000) {
      return (ms / 1000) + "s";
    } else {
      return ms + "ms";
    }
  };

  createTailQuote = function(str, count) {
    var lines;
    lines = str.split('\n').slice(-count);
    return "> " + (lines.join('\n> '));
  };

  procTimedoutError = function(proc, port, timeout) {
    var formatArguments, message, ref;
    formatArguments = function(args) {
      if (args == null) {
        args = [];
      }
      if (!args.length) {
        return '(no arguments)';
      }
      return args.join('\n           ');
    };
    message = "Process \"" + proc.name + "\" did not start in time.\n\nDebug info:\n* command: " + proc.launchCommand + "\n           " + (formatArguments(proc.launchArguments)) + "\n* cwd:     " + proc.workingDirectory + "\n* port:    " + port + "\n* timeout: " + (niceTime(timeout)) + "\n```\n\n" + (getLogWithQuote(proc));
    if (((ref = proc.error) != null ? ref.length : void 0) > 0) {
      message += "\n" + (proc.error.trim());
    }
    return new Error(message);
  };

  module.exports = function(proc, validate, interval, timeout, port, callback) {
    var check, error, procName, startTime;
    if (proc.rawProcess.exitCode != null) {
      error = procCrashedError(proc);
      return callback(error);
    }
    procName = proc.name;
    startTime = Date.now();
    check = function() {
      return validate(port, function(error, isReady) {
        if (proc.rawProcess.exitCode != null) {
          error = procCrashedError(proc);
          return callback(error);
        }
        if (error != null) {
          return callback(error);
        }
        if (isReady) {
          return callback();
        } else {
          if ((Date.now() - startTime) >= timeout) {
            try {
              proc.rawProcess.kill();
            } catch (_error) {}
            return callback(procTimedoutError(proc, port, timeout));
          }
          return setTimeout(check, 100);
        }
      });
    };
    return check();
  };

}).call(this);
